#lang racket

;;;
;;; Define all items
;;;

(provide (struct-out item$)
         get-item
         get-item-by-save-id)

(struct item$ (name id base-value flags) #:transparent)

; This list is not complete.
;
; Not all base values are known.
; For items thought to be available only from special sources (e.g. sentinel machines),
; the value is set to 1 billion.
;
; Id values are used in save files to refer to items. Not all are known.
; TODO: Not all that are known are entered here.
;
(define raw-items
  '((Activated-Cadmium 450 "EX_RED")
    (Activated-Copper 245)
    (Activated-Emeril 696 "EX_GREEN")
    (Activated-Indium 949 "EX_BLUE")
    (Ammonia 62 "TOXIC1")
    (Cactus-Flesh 28 "PLANT_DUST")
    (Cadmium 234 "RED2")
    (Carbon 7 "FUEL1")
    (Chlorine 602 "WATER2")
    (Chromatic-Metal 245 "STELLAR2")
    (Cobalt 198 "CAVE1")
    (Condensed-Carbon 24 "FUEL2")
    (Copper 110 "YELLOW2")
    (Coprite 30 "PLANT_POOP")
    (Deuterium 34 "LAUNCHSUB2")
    (Di-hydrogen 34 "LAUNCHSUB")
    (Dioxite 62 "COLD1")
    (Emeril 275 "GREEN2")
    (Ferrite-Dust 14 "LAND1")
    (Frost-Crystal 12)
    (Fungal-Mould 16 "PLANT_TOXIC")
    (Gamma-Root 16 "PLANT_RADIO")
    (Gold 202 "ASTEROID2")
    (Indium 464 "BLUE2")
    (Ionised-Cobalt 401 "CAVE2")
    (Kelp-Sac 41)
    (Living-Slime 20)
    (Magnetised-Ferrite 82 "LAND3")
    (Marrow-Bulb 41 "PLANT_CAVE")
    (Mordite 40 "CREATURE1")
    (Nitrogen 20 "GAS3")
    (Oxygen 34 "OXYGEN")
    (Paraffinium 62 "LUSH1")
    (Phosphorus 62 "HOT1")
    (Platinum 303 "ASTEROID3")
    (Pugneum 138 "ROBOT1")
    (Pure-Ferrite 14 "LAND2")
    (Pyrite 62 "DUSTY1")
    (Radon 20 "GAS2")
    (Residual-Goop 20)
    (Runaway-Mould 20)
    (Rusted-Metal 20)
    (Salt 299 "WATER1")
    (Silver 101 "ASTEROID1")
    (Sodium 41 "CATALYST1")
    (Sodium-Nitrate 82 "CATALYST2")
    (Solanium 70 "PLANT_HOT")
    (Star-Bulb 32 "PLANT_LUSH")
    (Sulphurine 20 "GAS1")
    (Tritium 6 "ROCKETSUB")
    (Uranium 62 "RADIO1")
    (Viscous-Fluids 20)

    ;; Other items
    (A-Class-Defence-Systems-Upgrade "UP_SHLD3" installed)
    (Acid 188000)
    (Advanced-Ion-Battery 500 "POWERCELL2")
    (Aronium 25000 "ALLOY1")
    (Antimatter 5233 "ANTIMATTER")
    (Antimatter-Housing 6500)
    (AtlasPass-v1 "ACCESS1")
    (AtlasPass-v2 "ACCESS2")
    (AtlasPass-v3 "ACCESS3")
    (Atmosphere-Harvester "BUILDGASHARVEST")
    (Base-Computer "BASE_FLAG")
    (Beacon "BUILDBEACON")
    (Blaze-Javelin-Module-\(A\) "U_RAIL3")
    (C-Class-Deflector-Shield-Upgrade "UP_S_SHL1" installed)
    (Carbon-Crystal "FUELPROD3")
    (Carbon-Nanotubes 500 "TRA_ALLOY1")
    (Chloride-Lattice "WATERPROD3")
    (Circuit-Board 916250)
    (Cobalt-Mirror 20500)
    (Cryo-Pump 1500000 "COMPOUND6")
    (Cryogenic-Chamber 3800000 "MEGAPROD3")
    (Cyclotron-Module-\(C\) "U_SHIPBLOB1")
    (Deflector-Shield "SHIPSHIELD" installed)
    (Di-hydrogen-Jelly 200 "JELLY")
    (Dirty-Bronze "ALLOY2")
    (Efficient-Thrusters "UT_LAUNCHER" installed)
    (Enriched-Carbon 50000 "REACTION2")
    (Explosive-Drones 75000)
    (|Frigate-Fuel (50 Tonnes)| 20000 "FRIGATE_FUEL_1") ; verify
    (|Frigate-Fuel (100 Tonnes)| "FRIGATE_FUEL_2")
    (|Frigate-Fuel (200 Tonnes)| "FRIGATE_FUEL_3")
    (Frost-Crystal "PLANT_SNOW")
    (Fuel-Oxidiser 75000 "FRIG_BOOST_SPD")
    (Fusion-Accelerant "COMPOUND4")
    (Gek-Relic "TRA_CURIO1")
    (Geodesite 150000 "ALLOY7")
    (Glass 13000)
    (Grantine 25000 "ALLOY6")
    (Gravatino-Ball "GRAVBALL")
    (Hazard-Protection "PROTECT" installed)
    (Heat-Capacitor 180000)
    (Hermetic-Seal 800)
    (Herox 25000 "ALLOY3")
    (Holographic-Analyser 75000 "FRIG_BOOST_EXP")
    (Hot-Ice 320000)
    (Hyperdrive "HYPERDRIVE" installed)
    (|Infra-Knife Module (A)| "U_SHIPMINI3")
    (Ion-Battery 200 "POWERCELL")
    (Iridesite 150000 "ALLOY8")
    (Jetpack "JET1" installed)
    (Korvax-Casing "EXP_CURIO1")
    (Korvax-Convergence-Cube "EXP_CURIO2")
    (Launch-Thruster "LAUNCHER" installed)
    (Lemmium 25000 "ALLOY4")
    (Life-Support "ENERGY" installed)
    (Life-Support-Gel 200 "PRODFUEL2")
    (Liquid-Explosive 800500)
    (Living-Glass 566000)
    (Lubricant 566000)
    (Magno-Gold 25000 "ALLOY5")
    (Metal-Plating 800)
    (Microprocessor 2000 "MICROCHIP")
    (Mind-Control-Device 75000 "FRIG_BOOST_TRA")
    (Mineral-Compressor 75000 "FRIG_BOOST_MIN")
    (Navigation-Data "NAV_DATA")
    (NipNip-Buds "NIPNIPBUDS")
    (Nitrogen-Salt 50000 "REACTION3")
    (Organic-Catalyst 320000 "COMPOUND1")
    (Poly-Fibre 130000)
    (Portable-Refiner "BUILD_REFINER1")
    (Projectile-Ammunition "AMMO")
    (Oxygen-Capsule 350 "PRODFUEL1")
    (Oxygen-Filter 615)
    (Photon-Cannon "SHIPGUN1")
    (|Photon Cannon Module (B)| "U_SHIPGUN2")
    (Projectile-Ammo 50)
    (Pulse-Engine "SHIPJUMP1" installed)
    (Quad-Servo 1000000000 "QUAD_PROD")
    (Quantum-Processor 4400000)
    (Rare-Metal-Element "LANDPROD3")
    (S-Class-Defence-Systems-Upgrade "UP_SHLD4" installed)
    (S-Class-Hyperdrive-Upgrade "UP_HYP4" installed)
    (S-Class-Life-Support-Upgrade "UP_ENGY3" installed)
    (S-Class-Movement-System-Upgrade "UP_JET4" installed)
    (S-Class-Photon-Cannon-Upgrade "UP_SGUN4" installed)
    (Salt-Refractor 30500)
    (Semiconductor 320000)
    (Signal-Booster "BUILDSIGNAL")
    (Sodium-Diode 3500)
    (Starship-Launch-Fuel 450 "LAUNCHFUEL")
    (Starship-Shield-Module-\(C\) "U_SHIPSHIELD1")
    (Stasis-Device 15600000)
    (Superconductor 1500000 "COMPOUND5")
    (Superoxide-Crystal "OXYPROD3")
    (TetraCobalt "CAVEPROD3")
    (Thermic-Condensate 50000 "REACTION1")
    (Unstable-Gel 50000)
    (Unstable-Plasma 5750 "GRENFUEL1")
    (Vy\'keen-Dagger "WAR_CURIO2")
    (Vy\'keen-Effigy "WAR_CURIO1")
    (Walker-Brain 1000000000)
    (Warp-Cell 46750 "HYPERFUEL1")))

(define items (make-hasheq
               (for/list ([def raw-items])
                 (match def
                   [(list (? symbol? n) (? string? id) (? symbol? flags) ...)
                    (cons n (item$ n id (void) flags))]
                   [(list (? symbol? n) (? integer? v) (? string? id) (? symbol? flags) ...)
                    (cons n (item$ n id v flags))]
                   [(list (? symbol? n) (? integer? v) (? symbol? flags) ...)
                    (cons n (item$ n (void) v flags))]
                   [(list (? symbol? n) (? symbol? flags) ...)
                    (cons n (item$ n (void) (void) flags))]
                   [(? symbol? n)
                      (cons n (item$ n (void) (void) '()))]))))


(define (get-item name)
  (hash-ref items name))

(define item-by-save-id (make-hash
                         (for/list ([i (hash-values items)]
                                    #:unless (void? (item$-id i)))
                           (cons (item$-id i) i))))

(define (get-item-by-save-id id [default (void)])
  (define match (regexp-match "^\\^([^#]+)(#[0-9]+)?" id))
  (unless match (raise-argument-error 'bad-save-id "^id(#num)?" id))
  (define key (second match))
  (hash-ref item-by-save-id key default))

